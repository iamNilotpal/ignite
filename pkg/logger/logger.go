// Package logger provides a centralized and configurable logging utility
// based on the `go.uber.org/zap` library. It offers a structured logging
// approach suitable for production environments, allowing for easy integration
// and consistent log formatting across different services and applications.
// The package simplifies the setup of a robust logger with predefined
// configurations for output format, timestamps, and initial contextual fields.
package logger

import (
	"os"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Creates and configures a new Zap SugaredLogger.
// It sets up a production-ready logger with JSON encoding, ISO8601 timestamps,
// and includes service name and process ID as initial fields.
//
// service: The name of the service or application using this logger. This will be
// added as an initial field to all log entries, making it easier to filter logs by service.
//
// outputPaths: Optional. A variadic slice of strings specifying where log output
// should be directed (e.g., "stderr", "stdout", or file paths like "logs/app.log").
// If no paths are provided, logs will default to "stderr".
func New(service string, outputPaths ...string) *zap.SugaredLogger {
	// Create a new production encoder configuration. This provides a good default
	// for structured logging in production environments, typically outputting JSON.
	encoderCfg := zap.NewProductionEncoderConfig()

	// Customize the time key in the JSON output.
	// Logs will now have a field named "timestamp" instead of the default "ts".
	encoderCfg.TimeKey = "timestamp"
	// Specify the format for encoding timestamps. ISO8601TimeEncoder outputs
	// timestamps in a standardized ISO 8601 format (e.g., "2023-10-27T10:00:00.123Z").
	encoderCfg.EncodeTime = zapcore.ISO8601TimeEncoder

	// Initialize the Zap configuration. This struct holds all the settings
	// for building the logger.
	config := zap.Config{
		// Set the logging level to Info. Messages at or above this level will be logged.
		// Other common levels include Debug, Warn, Error, DPanic, Panic, Fatal.
		Level: zap.NewAtomicLevelAt(zap.InfoLevel),
		// Development mode (true) is better for local development as it provides
		// human-readable output and adds caller information. Setting it to false
		// for production environments optimizes for performance and structured output.
		Development: false,
		// DisableCaller prevents adding source file and line number to log entries.
		// Keeping it false means caller information WILL be included.
		DisableCaller: false,
		// DisableStacktrace prevents Zap from automatically capturing stack traces
		// for Error, DPanic, Panic, and Fatal level logs. Keeping it false means
		// stack traces WILL be captured.
		DisableStacktrace: false,
		// Sampling can be used to reduce the number of log entries for high-volume logs.
		// Nil means no sampling is applied, logging every message.
		Sampling: nil,
		// Specify the encoding format for log output. "json" is ideal for
		// machine readability and integration with log analysis tools.
		Encoding: "json",
		// Apply the custom encoder configuration defined above.
		EncoderConfig: encoderCfg,
		// Define the default output paths for log entries. If no specific paths
		// are provided via 'outputPaths' argument, logs will go to standard error.
		OutputPaths: []string{"stderr"},
		// Define the default output paths for error log entries. Similar to OutputPaths,
		// but specifically for internal Zap errors (e.g., failure to write a log).
		ErrorOutputPaths: []string{"stderr"},
		// InitialFields are key-value pairs that will be added to every log entry
		// generated by this logger. This is useful for contextual information
		// like the service name and process ID.
		InitialFields: map[string]any{"service": service, "pid": os.Getpid()},
	}

	// Override the default output paths if custom 'outputPaths' are provided.
	if len(outputPaths) != 0 {
		config.OutputPaths = outputPaths
	}

	// Build the Zap logger from the configuration and convert it to a SugaredLogger.
	// .Sugar() provides the more convenient, less verbose logging API.
	return zap.Must(config.Build()).Sugar()
}
